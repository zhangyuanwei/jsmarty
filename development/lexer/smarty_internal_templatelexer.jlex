/**
 * Smarty Internal Plugin Templatelexer
 *
 * This is the lexer to break the template source into tokens
 * @package Smarty
 * @subpackage Compiler
 * @author Uwe Tews
 * @modifier zhangyuanwei
 */

(function(global){
function preg_quote(str) {
    return String(str)
        .replace(/[.\\+*?\[\^\]$(){}=!<>|:\-]/g, "\\$&");
}

/**
 * Smarty Internal Plugin Templatelexer
 */

function Smarty_Internal_Templatelexer(data, compiler) {
    //      this.data = preg_replace("/(\r\n|\r|\n)/", "\n", data);
    this.data = data;
    this.dataLength = data.length;
    this.counter = 0;
    this.token = null;
    this.value = null;
    this.node = null;
    this.line = 1;
    this.taglineno = 1;
    this.state = 1;
    this.state_name = {
        "1": 'TEXT',
        "2": 'SMARTY',
        "3": 'LITERAL',
        "4": 'DOUBLEQUOTEDSTRING',
        "5": 'CHILDBODY'
    };
    this.heredoc_id_stack = [];
    //this.yyTraceFILE;
    //this.yyTracePrompt;

    this.smarty_token_names = { // Text for parser error messages
        'IDENTITY': '===',
        'NONEIDENTITY': '!==',
        'EQUALS': '==',
        'NOTEQUALS': '!=',
        'GREATEREQUAL': '(>=,ge)',
        'LESSEQUAL': '(<=,le)',
        'GREATERTHAN': '(>,gt)',
        'LESSTHAN': '(<,lt)',
        'MOD': '(%,mod)',
        'NOT': '(!,not)',
        'LAND': '(&&,and)',
        'LOR': '(||,or)',
        'LXOR': 'xor',
        'OPENP': '(',
        'CLOSEP': ')',
        'OPENB': '[',
        'CLOSEB': ']',
        'PTR': '->',
        'APTR': '=>',
        'EQUAL': '=',
        'NUMBER': 'number',
        'UNIMATH': '+" , "-',
        'MATH': '*" , "/" , "%',
        'INCDEC': '++" , "--',
        'SPACE': ' ',
        'DOLLAR': '$',
        'SEMICOLON': ';',
        'COLON': ':',
        'DOUBLECOLON': '::',
        'AT': '@',
        'HATCH': '#',
        'QUOTE': '"',
        'BACKTICK': '`',
        'VERT': '|',
        'DOT': '.',
        'COMMA': '","',
        'ANDSYM': '"&"',
        'QMARK': '"?"',
        'ID': 'identifier',
        'TEXT': 'text',
        'FAKEPHPSTARTTAG': 'Fake PHP start tag',
        'PHPSTARTTAG': 'PHP start tag',
        'PHPENDTAG': 'PHP end tag',
        'LITERALSTART': 'Literal start',
        'LITERALEND': 'Literal end',
        'LDELSLASH': 'closing tag',
        'COMMENT': 'comment',
        'AS': 'as',
        'TO': 'to'
    };

    this.smarty = compiler.smarty;
    this.compiler = compiler;
    this.ldel = preg_quote(this.smarty.left_delimiter);
    this.ldel_length = this.smarty.left_delimiter.length;
    this.rdel = preg_quote(this.smarty.right_delimiter);
    this.rdel_length = this.smarty.right_delimiter.length;
    this.smarty_token_names['LDEL'] = this.smarty.left_delimiter;
    this.smarty_token_names['RDEL'] = this.smarty.right_delimiter;
    //this.mbstring_overload = ini_get('mbstring.func_overload') & 2;

    this._init && this._init();
}

var TOKEN = {};

(function(self, proto) {

    self.setTokenMap = function(map){
        TOKEN = map;
    };

    proto.isAutoLiteral = function() {
        if(this.smarty.auto_literal){
            var nextChar = this.value[this.ldel_length];
            if(nextChar && /^[ \n\t\r]$/.test(nextChar)){
                return true;
            }
        }
        return false;
    };

    proto.testAutoLiteral = function(token) {
        var auto = this.isAutoLiteral();
        this.token = auto
            ? TOKEN.TP_TEXT
            : token;
        return auto;
    };

    proto.tryEnterSmarty = function(token) {
        if(!this.testAutoLiteral(token)){
            this.yypushstate(self.SMARTY);
            this.taglineno = this.line;
        }
    };

/*!lex2php
%input this.data
%counter this.counter
%token this.token
%value this.value
%line this.line
%format javascript
linebreak = /[\t ]*[\r\n]+[\t ]*/
text = /[\S\s]/
textdoublequoted = /([^"\\]*?)((?:\\.[^"\\]*?)*?)(?=(SMARTYldel|\$|`\$|"))/
dollarid = /\$[0-9]*[a-zA-Z_]\w*/
all = /[\S\s]+/
emptyjava = /\{\}/
phpstarttag = /<\?(?:php\w+|=|[a-zA-Z]+)?/
phpendtag = /\?>/
aspstarttag = /<%/
aspendtag = /%>/
slash = /\//
ldel = /SMARTYldel\s*/
rdel = /\s*SMARTYrdel/
smartyblockchildparent = /[\$]smarty\.block\.(child|parent)/
integer = /\d+/
hex =  /0[xX][0-9a-fA-F]+/
math = /\s*(\*|\/|\%)\s*/
comment = /SMARTYldel\*([\S\s]*?)\*SMARTYrdel/
incdec = /\+\+|\-\-/
unimath = /\s*(\+|\-)\s*/
openP = /\s*\(\s*/
closeP = /\s*\)/
openB = /\[\s*/
closeB = /\s*\]/
dollar = /\$/
dot = /\./
comma = /\s*\,\s*/
doublecolon = /\:\:/
colon = /\s*\:\s*/
at = /@/
hatch = /#/
semicolon = /\s*\;/
equal = /\s*=\s*/
space = /\s+/
ptr = /\s*\->\s*/
aptr = /\s*=>\s*/
singlequotestring = /'[^'\\]*(?:\\.[^'\\]*)*'/
backtick = /`/
backtickdollar = /`\$/
vert = /\|/
andsym = /\s*\&\s*/
qmark = /\s*\?\s*/
constant = /([_]+[A-Z0-9][0-9A-Z_]*|[A-Z][0-9A-Z_]*)(?![0-9A-Z_]*[a-z])/
attr = /\s+[0-9]*[a-zA-Z_][a-zA-Z0-9_\-:]*\s*=\s*/
id = /[0-9]*[a-zA-Z_]\w*/
literal = /literal/
strip = /strip/
equals = /\s*==\s*|\s+eq\s+/
notequals = /\s*!=\s*|\s*<>\s*|\s+(ne|neq)\s+/
greaterthan = /\s*>\s*|\s+gt\s+/
lessthan = /\s*<\s*|\s+lt\s+/
greaterequal = /\s*>=\s*|\s+(ge|gte)\s+/
lessequal = /\s*<=\s*|\s+(le|lte)\s+/
mod = /\s+mod\s+/
identity = /\s*===\s*/
noneidentity = /\s*!==\s*/
isoddby = /\s+is\s+odd\s+by\s+/
isnotoddby = /\s+is\s+not\s+odd\s+by\s+/
isodd = /\s+is\s+odd/
isnotodd = /\s+is\s+not\s+odd/
isevenby = /\s+is\s+even\s+by\s+/
isnotevenby = /\s+is\s+not\s+even\s+by\s+/
iseven = /\s+is\s+even/
isnoteven = /\s+is\s+not\s+even/
isdivby = /\s+is\s+div\s+by\s+/
isnotdivby = /\s+is\s+not\s+div\s+by\s+/
isin = /\s+is\s+in\s+/
as = /\s+as\s+/
to = /\s+to\s+/
step = /\s+step\s+/
block = /block/
if = /(if|elseif|else if|while)\s+/
for = /for\s+/
foreach = /foreach(?![^\s])/
setfilter = /setfilter\s+/
instanceof = /\s+instanceof\s+/
not = /!\s*|not\s+/
land = /\s*\&\&\s*|\s*and\s+/
lor = /\s*\|\|\s*|\s*or\s+/
lxor = /\s*xor\s+/
typecast = /\((int(eger)?|bool(ean)?|float|double|real|string|binary|array|object)\)\s*/
double_quote = /"/
single_quote = /'/
*/
/*!lex2php
%statename TEXT
emptyjava {
  this.token = TOKEN.TP_TEXT;
}
comment {
  this.token = TOKEN.TP_COMMENT;
}
ldel strip rdel {
    this.testAutoLiteral(TOKEN.TP_STRIPON);
}
ldel slash strip rdel {
    this.testAutoLiteral(TOKEN.TP_STRIPOFF);
}
ldel literal rdel {
    if(!this.testAutoLiteral(TOKEN.TP_LITERALSTART)){
        this.yypushstate(self.LITERAL);
    }
}
ldel if {
    this.tryEnterSmarty(TOKEN.TP_LDELIF);
}
ldel for {
    this.tryEnterSmarty(TOKEN.TP_LDELFOR);
}
ldel foreach {
    this.tryEnterSmarty(TOKEN.TP_LDELFOREACH);
}
ldel setfilter {
    this.tryEnterSmarty(TOKEN.TP_LDELSETFILTER);
}
ldel slash {
    this.tryEnterSmarty(TOKEN.TP_LDELSLASH);
}
ldel {
    this.tryEnterSmarty(TOKEN.TP_LDEL);
}
phpstarttag {
  if(this.value == '<?' || this.value == '<?=' || this.value == '<?php'){
    this.token = TOKEN.TP_PHPSTARTTAG;
  } else if (this.value == '<?xml') {
    this.token = TOKEN.TP_XMLTAG;
  } else {
    this.token = TOKEN.TP_FAKEPHPSTARTTAG;
    this.value = this.value.substr(0, 2);
  }
 }
phpendtag {
  this.token = TOKEN.TP_PHPENDTAG;
}
rdel {
  this.token = TOKEN.TP_TEXT;
}
aspstarttag {
  this.token = TOKEN.TP_ASPSTARTTAG;
}
aspendtag {
  this.token = TOKEN.TP_ASPENDTAG;
}
text {
  var nextReg = new RegExp("SMARTYldel|<\\?|\\?>|<%|%>", "g");
  nextReg.lastIndex = this.counter;

  var to = this.dataLength,
      result;
  if((result = nextReg.exec(this.data)) !== null){
    to = result.index;
  }
  this.value = this.data.substring(this.counter, to);
  this.token = TOKEN.TP_TEXT;
}
*/

/*!lex2php
%statename SMARTY
double_quote {
  this.token = TOKEN.TP_QUOTE;
  this.yypushstate(self.DOUBLEQUOTEDSTRING);
}
singlequotestring {
  this.token = TOKEN.TP_SINGLEQUOTESTRING;
}
smartyblockchildparent {
     this.token = TOKEN.TP_SMARTYBLOCKCHILDPARENT;
     this.taglineno = this.line;
}
dollar {
  this.token = TOKEN.TP_DOLLAR;
}
rdel {
  this.token = TOKEN.TP_RDEL;
  this.yypopstate();
}
isin {
  this.token = TOKEN.TP_ISIN;
}
as {
  this.token = TOKEN.TP_AS;
}
to {
  this.token = TOKEN.TP_TO;
}
step {
  this.token = TOKEN.TP_STEP;
}
instanceof {
  this.token = TOKEN.TP_INSTANCEOF;
}
identity{
  this.token = TOKEN.TP_IDENTITY;
}
noneidentity{
  this.token = TOKEN.TP_NONEIDENTITY;
}
equals{
  this.token = TOKEN.TP_EQUALS;
}
notequals{
  this.token = TOKEN.TP_NOTEQUALS;
}
greaterequal{
  this.token = TOKEN.TP_GREATEREQUAL;
}
lessequal{
  this.token = TOKEN.TP_LESSEQUAL;
}
greaterthan{
  this.token = TOKEN.TP_GREATERTHAN;
}
lessthan{
  this.token = TOKEN.TP_LESSTHAN;
}
mod{
  this.token = TOKEN.TP_MOD;
}
not{
  this.token = TOKEN.TP_NOT;
}
land {
  this.token = TOKEN.TP_LAND;
}
lor {
  this.token = TOKEN.TP_LOR;
}
lxor {
  this.token = TOKEN.TP_LXOR;
}
isoddby {
  this.token = TOKEN.TP_ISODDBY;
}
isnotoddby {
  this.token = TOKEN.TP_ISNOTODDBY;
}
isodd  {
  this.token = TOKEN.TP_ISODD;
}
isnotodd {
  this.token = TOKEN.TP_ISNOTODD;
}
isevenby {
  this.token = TOKEN.TP_ISEVENBY;
}
isnotevenby {
  this.token = TOKEN.TP_ISNOTEVENBY;
}
iseven{
  this.token = TOKEN.TP_ISEVEN;
}
isnoteven {
  this.token = TOKEN.TP_ISNOTEVEN;
}
isdivby {
  this.token = TOKEN.TP_ISDIVBY;
}
isnotdivby {
  this.token = TOKEN.TP_ISNOTDIVBY;
}
typecast {
  this.token = TOKEN.TP_TYPECAST;
}
openP {
  this.token = TOKEN.TP_OPENP;
}
closeP {
  this.token = TOKEN.TP_CLOSEP;
}
openB {
  this.token = TOKEN.TP_OPENB;
}
closeB {
  this.token = TOKEN.TP_CLOSEB;
}
ptr {
  this.token = TOKEN.TP_PTR;
}
aptr {
  this.token = TOKEN.TP_APTR;
}
equal {
  this.token = TOKEN.TP_EQUAL;
}
incdec {
  this.token = TOKEN.TP_INCDEC;
}
unimath {
  this.token = TOKEN.TP_UNIMATH;
}
math {
  this.token = TOKEN.TP_MATH;
}
at {
  this.token = TOKEN.TP_AT;
}
hatch {
  this.token = TOKEN.TP_HATCH;
}
attr {
  // resolve conflicts with shorttag and right_delimiter starting with '='
  var start = this.counter + this.value.length - 1;
  //if (substr(this.data, this.counter + strlen(this.value) - 1, this.rdel_length) == this.smarty.right_delimiter) {
  if (this.data.indexOf(this.smarty.right_delimiter, start) === start) {
    // TODO
     preg_match("/\s+/",this.value,$match);
     this.value = $match[0];
     this.token = TOKEN.TP_SPACE;
  } else {
     this.token = TOKEN.TP_ATTR;
  }
}
id {
  this.token = TOKEN.TP_ID;
}
integer {
  this.token = TOKEN.TP_INTEGER;
}
backtick {
  this.token = TOKEN.TP_BACKTICK;
  this.yypopstate();
}
vert {
  this.token = TOKEN.TP_VERT;
}
dot {
  this.token = TOKEN.TP_DOT;
}
comma {
  this.token = TOKEN.TP_COMMA;
}
semicolon {
  this.token = TOKEN.TP_SEMICOLON;
}
doublecolon {
  this.token = TOKEN.TP_DOUBLECOLON;
}
colon {
  this.token = TOKEN.TP_COLON;
}
andsym {
  this.token = TOKEN.TP_ANDSYM;
}
qmark {
  this.token = TOKEN.TP_QMARK;
}
hex {
  this.token = TOKEN.TP_HEX;
}
space {
  this.token = TOKEN.TP_SPACE;
}
ldel if {
  this.tryEnterSmarty(TOKEN.TP_LDELIF);
}
ldel for {
  this.tryEnterSmarty(TOKEN.TP_LDELFOR);
}
ldel foreach {
  this.tryEnterSmarty(TOKEN.TP_LDELFOREACH);
}
ldel slash {
  this.tryEnterSmarty(TOKEN.TP_LDELSLASH);
}
ldel {
  this.tryEnterSmarty(TOKEN.TP_LDEL);
}
text {
  this.token = TOKEN.TP_TEXT;
}
*/

/*!lex2php
%statename LITERAL
ldel literal rdel {
    if(!this.testAutoLiteral(TOKEN.TP_LITERALSTART)){
        this.yypushstate(self.LITERAL);
    }
}
ldel slash literal rdel {
    if(!this.testAutoLiteral(TOKEN.TP_LITERALEND)){
        this.yypopstate();
    }
}
phpstarttag {
   if(this.value == '<?' || this.value == '<?=' || this.value == '<?php'){
    this.token = TOKEN.TP_PHPSTARTTAG;
   } else {
    this.token = TOKEN.TP_FAKEPHPSTARTTAG;
    this.value = this.value.substr(0, 2);
   }
}
phpendtag {
  this.token = TOKEN.TP_PHPENDTAG;
}
aspstarttag {
  this.token = TOKEN.TP_ASPSTARTTAG;
}
aspendtag {
  this.token = TOKEN.TP_ASPENDTAG;
}
text {
  var nextReg = new RegExp("SMARTYldel/?literalSMARTYrdel|<\\?|\\?>|<%|%>", "g");
  nextReg.lastIndex = this.counter;

  var to = this.dataLength,
      result;
  if((result = nextReg.exec(this.data)) !== null){
    to = result.index;
  } else {
    this.compiler.trigger_template_error("missing or misspelled literal closing tag");
  }
  this.value = this.data.substring(this.counter, to);
  this.token = TOKEN.TP_LITERAL;
}
*/

/*!lex2php
%statename DOUBLEQUOTEDSTRING
ldel if {
    this.tryEnterSmarty(TOKEN.TP_LDELIF);
}
ldel for {
    this.tryEnterSmarty(TOKEN.TP_LDELFOR);
}
ldel foreach {
    this.tryEnterSmarty(TOKEN.TP_LDELFOREACH);
}
ldel slash {
    this.tryEnterSmarty(TOKEN.TP_LDELSLASH);
}
ldel {
    this.tryEnterSmarty(TOKEN.TP_LDEL);
}
double_quote {
  this.token = TOKEN.TP_QUOTE;
  this.yypopstate();
}
backtickdollar {
  this.token = TOKEN.TP_BACKTICK;
  this.value = this.value.substr(0,-1);
  this.yypushstate(self.SMARTY);
  this.taglineno = this.line;
}
dollarid {
  this.token = TOKEN.TP_DOLLARID;
}

dollar {
  this.token = TOKEN.TP_TEXT;
}
textdoublequoted {
  this.token = TOKEN.TP_TEXT;
}
text {
  //奇怪的逻辑
  this.value = this.data.substr(this.counter);
  this.token = TOKEN.TP_TEXT;
}
*/

/*!lex2php
%statename CHILDBODY
ldel strip rdel {
    if(this.isAutoLiteral()){
        return false;
    }else{
        this.token = TOKEN.TP_STRIPON;
    }
}
ldel slash strip rdel {
    if(this.isAutoLiteral()){
        return false;
    }else{
        this.token = TOKEN.TP_STRIPOFF;
    }
}
ldel block  {
    if(this.isAutoLiteral()){
        return false;
    }else{
        this.yypopstate();
        return true;
    }
}
text {
  var nextReg = new RegExp("SMARTYldel\s*((/)?strip\\s*SMARTYrdel|block\\s+)", "g");
  nextReg.lastIndex = this.counter;

  var to = this.dataLength,
      result;
  if((result = nextReg.exec(this.data)) !== null){
    to = result.index;
  }

  this.value = this.data.substring(this.counter, to);
  return false;
}
*/

/*!lex2php
%statename CHILDBLOCK

ldel block {
    if(this.isAutoLiteral()){
        this.token = TOKEN.TP_BLOCKSOURCE;
    }else{
        this.yypopstate();
        return true;
    }
}
ldel slash block {
    if(this.isAutoLiteral()){
        this.token = TOKEN.TP_BLOCKSOURCE;
    }else{
        this.yypopstate();
        return true;
    }
}
ldel smartyblockchildparent {
    if(this.isAutoLiteral()){
        this.token = TOKEN.TP_BLOCKSOURCE;
    }else{
        this.yypopstate();
        return true;
    }
}
text {
  var nextReg = new RegExp("SMARTYldel\\s*((/)?block(\\s|SMARTYrdel)|[\\$]smarty\\.block\\.(child|parent)\\s*SMARTYrdel)", "g");
  nextReg.lastIndex = this.counter;

  var to = this.dataLength,
      result;
  if((result = nextReg.exec(this.data)) !== null){
    to = result.index;
  } else {
    this.compiler.trigger_template_error("missing or misspelled literal closing tag");
  }
  this.value = this.data.substring(this.counter, to);
  this.token = TOKEN.TP_BLOCKSOURCE;
}
*/
    
    if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = self;
    }else{
        global["Smarty_Internal_Templatelexer"] = self;
    }
})(Smarty_Internal_Templatelexer, Smarty_Internal_Templatelexer.prototype);
})(this);
// vim600: syn=javascript
